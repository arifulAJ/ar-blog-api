openapi: 3.0.0
info:
  version: 1.0.0
  title: "A.R blog api"
  description: |
    The A.R Blog API is a robust and flexible RESTful API that allows you to manage blog posts, comments, and user accounts for your blogging platform. It provides a secure and efficient way to create, retrieve, update, and delete blog content.

    **Key Features:**
    - Create and manage blog posts with titles, content, and tags.
    - Allow user registration and authentication for creating and managing their own blog posts and comments.
    - Enable commenting on blog posts to foster community engagement.
    - Retrieve lists of blog posts with pagination and filtering options.
    - Built-in security measures, including authentication and authorization, to protect user data and content
  contact:
    name: "A.R Tech Hub"
    url: "https//a.r.i.tech-venture"
    email: arifulislam10111999@gmail.com

servers:
  - description: dev
    url: http://localhost:5000/api/v1
  - description: server
    url: https://ar-blog-api.onrender.com/api/v1
tags:
  - name: Auth
    description: authentaion end points
  - name: Article
    description: article endpoints (public or private)
  - name: Comment
    description: comment endpoints (private)
  - name: User
    description: user endpoints (admin only)
  - name: Like
    description: like endpoints any user

paths:
  "/auth/signup":
    post:
      description: create a new  user
      tags: [Auth]
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Md Ariful islam
                email:
                  type: string
                  format: email
                  example: ariful@example.com
                password:
                  type: string
                  format: password
                  example: pass123
              required: [name, email, password]
      responses:
        "201":
          description: sign up sussesful
          content:
            "application/json":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 201
                  message:
                    type: string
                    example: sign up successful
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: "yJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"

                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: "/auth/singup"
                      signin:
                        type: string
                        example: "/auth/signin"
        "400":
          $ref: "#/components/responses/400"
        "500":
          $ref: "#/components/responses/500"
  "/auth/signin":
    post:
      description: sing in by credadintail
      tags:
        - Auth
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: ariful@example.com
                password:
                  type: string
                  format: password
                  example: pass123
              required: [email, password]
      responses:
        "200":
          description: sing in successfuly
          content:
            "application/json":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: sign in successful
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: "yJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"

                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: "/auth/singup"

        "400":
          $ref: "#/components/responses/400"
        "500":
          $ref: "#/components/responses/500"

    get:
      summary: Retrieve Signin Information
      tags:
        - Auth
      description: Retrieve information about the signin process.
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A success message.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating that the resource was not found.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating an internal server error.
                description: sing in by credadintail
  "/auth/token":
    get:
      summary: Retrieve Signin Information
      tags:
        - Auth
      description: Retrieve information about the signin process.
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A success message.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating that the resource was not found.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating an internal server error.
                description: sing in by credadintail
  "/auth/logout":
    get:
      summary: Logout
      tags:
        - Auth
      description: Log out the authenticated user.
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating that the user is not authenticated.
  "/articles":
    get:
      tags: [Article]
      description: Retrive all published articles
      parameters:
        - $ref: "#/components/parameters/pageParams"
        - $ref: "#/components/parameters/limitParams"
        - $ref: "#/components/parameters/sortTypeParams"
        - $ref: "#/components/parameters/sortByparams"
        - $ref: "#/components/parameters/searchparams"
        - $ref: "#/components/parameters/tagsparams"
      responses:
        "200":
          description: return the list of article
          content:
            "application/json":
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            id:
                              type: integer
                              format: int32
                              example: 1
                            title:
                              type: string
                              example: first article
                            cover:
                              type: string

                              # format: url
                              nullable: true
                              example: http://digital.jpg
                            author:
                              $ref: "#/components/schemas/authorDTO"
                            link:
                              type: string
                              format: url
                              example: /aritcle/2

                          required: [id, title, author]
                        - $ref: "#/components/schemas/Timestamp"
                  pagination:
                    $ref: "#/components/schemas/pagination"
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: /article?page=2&limit=10
                      next:
                        type: string
                        format: url
                        example: /article?page=3&limit=10
                      prev:
                        type: string
                        format: url
                        example: /article?page=1&limit=10
        "400":
          $ref: "#/components/responses/400"
        "500":
          $ref: "#/components/responses/500"
    post:
      operationId: createPost
      security:
        - bearerAuth: []
      # security:
      #   - sessionAuth: []
      tags: [Article]
      description: create a new article
      requestBody:
        description: to create new article user must provide valid data
        content:
          "application/json":
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: blog article of CMV
                body:
                  type: string
                  format: text
                  example: this is body of article
                tags:
                  type: string

                  example: technology
                cover:
                  type: string
                  # format: url
                  nullable: true
                  example: http://s3.3aws.min.com
                status:
                  type: string
                  enum: [draft, published]
                  example: draft
              required: [title, body, tags]
      responses:
        "201":
          description: created successfully
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ArticleCreatedDTO"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "500":
          $ref: "#/components/responses/500"
  "/articles/{id}":
    get:
      tags: [Article]
      description: fetch a single article
      parameters:
        - $ref: "#/components/parameters/idpathparams"
        - in: query
          name: expand
          description: expand author , comment and like objcet
          schema:
            type: string
            example: "author,comment,like"
      responses:
        "200":
          description: single article view
          content:
            "application/json":
              schema:
                type: object
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/Articles"
                      - type: object
                        properties:
                          author:
                            $ref: "#/components/schemas/authorDTO"
                      - type: object
                        properties:
                          comments:
                            type: array
                            items:
                              $ref: "#/components/schemas/Comment"

                  linke:
                    type: object
                    properties:
                      self:
                        type: string
                        example: /article/1
                      author:
                        type: string
                        example: /aritcle/1/author
                      comments:
                        type: string
                        example: /aritcle/1/comments
                      likes:
                        type: string
                        example: /aritcle/1/likes

        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
    put:
      security:
        - bearerAuth: []
      tags: [Article]
      description: create or update
      parameters:
        - $ref: "#/components/parameters/idpathparams"
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: article title
                body:
                  type: string
                  format: text
                  example: article body
                cover:
                  type: string
                  # format: url
                  nullable: true
                  example: http://s3.awamor.jeg
                status:
                  type: string
                  enum: [draft, published]
                  example: draft
              required: [title, body, status]
      responses:
        "200":
          description: updated successfully
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/articleUpdateDTO"
        "201":
          description: created successfully
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ArticleCreatedDTO"

        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "500":
          $ref: "#/components/responses/500"
    patch:
      security:
        - bearerAuth: []
      tags: [Article]
      description: update the article
      parameters:
        - $ref: "#/components/parameters/idpathparams"
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: article title
                body:
                  type: string
                  format: text
                  example: article body
                cover:
                  type: string
                  # format: url
                  nullable: true
                  example: http://s3.awamor.jeg
                status:
                  type: string
                  enum: [draft, published]
                  example: draft

      responses:
        "200":
          description: updated successfully
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/articleUpdateDTO"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
    delete:
      security:
        - bearerAuth: []
      tags: [Article]
      description: delete the article
      parameters:
        - $ref: "#/components/parameters/idpathparams"
      responses:
        "204":
          description: article delete successfully
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
  "/comments":
    get:
      security:
        - bearerAuth: []
      tags: [Comment]
      description: retrive all comments
      parameters:
        - $ref: "#/components/parameters/pageParams"
        - $ref: "#/components/parameters/limitParams"
        - $ref: "#/components/parameters/sortTypeParams"
        - $ref: "#/components/parameters/sortByparamsComment"

      responses:
        "200":
          description: return the list of comment
          content:
            "application/json":
              schema:
                type: object
                properties:
                  comment:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            body:
                              type: string
                              example: provide your comment body
                            author:
                              type: object
                              properties:
                                id:
                                  type: string
                                  example: commentId
                                name:
                                  type: string
                                  example: comment author
                        - $ref: "#/components/schemas/Timestamp"
                  pagination:
                    type: object
                    properties:
                      prevComment:
                        type: integer
                        format: int32
                        example: 1
                      nextComment:
                        type: integer
                        format: int32
                        example: 3
                      limit:
                        type: integer
                        format: int32
                        example: 10
        "404":
          $ref: "#/components/responses/404"
    post:
      security:
        - bearerAuth: []
      tags: [Comment]
      description: post your comment on the article
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                body:
                  type: string

                  example: this is body of article
                articleId:
                  type: string

                  example: 650a39ae55e35291c3f17b09
                status:
                  type: string
                  enum: [private, public]
                  default: public

              required: [body, articleId]
      responses:
        "201":
          description: created successfully
          content:
            "application/json":
              schema:
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 201
                  message:
                    type: string
                    example: created successfully
                  body:
                    $ref: "#/components/schemas/Comment"
        "401":
          $ref: "#/components/responses/401"
        "400":
          $ref: "#/components/responses/400"
  "/comments/{id}":
    patch:
      # operationId: update comment
      security:
        - bearerAuth: []
      tags: [Comment]
      description: update your comment
      parameters:
        - $ref: "#/components/parameters/commentPathparam"
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                body:
                  type: string
                  example: harry your documentory is relly good
      responses:
        "200":
          description: updated successfully
          content:
            "aplication/json":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: updated successfully
                  commentData:
                    $ref: "#/components/schemas/Comment"
        "404":
          $ref: "#/components/responses/404"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
    delete:
      security:
        - bearerAuth: []
      tags: [Comment]
      description: delete your article
      parameters:
        - $ref: "#/components/parameters/commentPathparam"
      responses:
        "204":
          description: comment delete successfully

        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
  "/user":
    get:
      # security:
      #   - bearerAuth: []
      tags: [User]
      # description: retrive all user only admin can
      parameters:
        - $ref: "#/components/parameters/pageParams"
        - $ref: "#/components/parameters/limitParamsUser"

        - $ref: "#/components/parameters/sortTypeParams"
        - $ref: "#/components/parameters/sortByparamsOfuser"
        - $ref: "#/components/parameters/searchparamsUser"

      responses:
        "200":
          description: retrive all users
          content:
            "application/json":
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            id:
                              type: string
                              example: 65029caf16a8aabf893b8bd0
                            name:
                              type: string
                              example: ariful islam
                            email:
                              type: string
                              format: email
                              example: ariful@example.com
                            avatar:
                              type: string
                              format: url
                              example: "http//arif/avata.png"
                  pagination:
                    type: object
                    properties:
                      prevPage:
                        type: integer
                        format: int32
                        example: 1
                      nextPage:
                        type: integer
                        format: int32
                        example: 3
                      limit:
                        type: integer
                        format: int32
                        example: 10
        "404":
          $ref: "#/components/responses/404"
    post:
      security:
        - bearerAuth: []
      description: creat new user
      tags: [User]
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/usercreateDTO"

      responses:
        "201":
          description: user created successfully
          content:
            "aplication/json":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 201
                  message:
                    type: string
                    example: created successfully
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: ksdlfjlsdjfoisfuiowjfkjsdfjlkjfoism0 sdojfosdjf
                  link:
                    type: object
                    properties:
                      prevuser:
                        type: string
                        format: url
                        example: "http//api/v1/user/prevUser"
                      nextUser:
                        type: string
                        format: url
                        example: "http//api/v1/user/nextUser"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
  "/user/{id}":
    get:
      # security:
      #   - bearerAuth: []
      tags: [User]
      description: get user by id
      summary: user by id
      parameters:
        - $ref: "#/components/parameters/userpathParams"

      responses:
        "200":
          description: retrive all users
          content:
            "application/json":
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            id:
                              type: string
                              example: 65029caf16a8aabf893b8bd0
                            name:
                              type: string
                              example: ariful islam
                            email:
                              type: string
                              format: email
                              example: ariful@example.com
                            avatar:
                              type: string
                              format: url
                              example: "http//arif/avata.png"
                  pagination:
                    type: object
                    properties:
                      prevPage:
                        type: integer
                        format: int32
                        example: 1
                      nextPage:
                        type: integer
                        format: int32
                        example: 3
                      limit:
                        type: integer
                        format: int32
                        example: 10
        "404":
          $ref: "#/components/responses/404"
    patch:
      security:
        - bearerAuth: []
      tags: [User]
      description: update your user accounts
      summary: update user
      parameters:
        - $ref: "#/components/parameters/userpathParams"
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: md ariful islam

                password:
                  type: string
                  format: password
                  example: pass123
                avatar:
                  type: string
                  nullable: true
                  example: "http//avatar/min.png"
      responses:
        "200":
          description: creat or update user
          content:
            "aplication/json":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: updated or created successfully
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 65029caf16a8aabf893b8bd8
                      name:
                        type: string
                        example: md ariful islam
                      email:
                        type: string
                        format: email
                        example: ariful@example.com
                      avatar:
                        type: string
                        format: url
                        example: "http//avatar/sdfjj"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
    delete:
      security:
        - bearerAuth: []
      tags: [User]
      description: delete user
      summary: delete user
      parameters:
        - $ref: "#/components/parameters/userpathParams"
      responses:
        "204":
          description: user  delete successfully

        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
  # "/like":
  #   get:

  #   description: like the article or comments
  #    tags= [Like]

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    # bearerAuth:
    #   type: http
    #   scheme: bearer
    #   bearerFormat: JWT
  schemas:
    Articles:
      allOf:
        - type: object
          properties:
            id:
              type: string

              example: valid id
            authorId:
              type: string

              example: valid atuhor id
            title:
              type: string
              example: First article
            body:
              type: string
              format: text
              example: the body of the first article
            cover:
              type: string
              # format: url
              nullable: true
              example: http://s.3hawsfrom.bit
            status:
              type: string
              enum: [draft, publised]
              example: draft
          required: [id, authorId, title, body, status]
        - $ref: "#/components/schemas/Timestamp"
    ArticleCreatedDTO:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 201
        message:
          type: string
          example: article create successfully
        data:
          $ref: "#/components/schemas/Articles"
        links:
          type: object
          properties:
            self:
              type: string
              format: url
              example: /article/1
            author:
              type: string
              format: url
              example: /article/1/author
            comments:
              type: string
              format: url
              example: /article/1/comments
    articleUpdateDTO:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 200
        message:
          type: string
          example: article update successfully
        data:
          $ref: "#/components/schemas/Articles"

        linke:
          type: object
          properties:
            self:
              type: string
              example: /article/1
    Comment:
      allOf:
        - type: object
          properties:
            id:
              type: string

              example: "65096c2fd1b51ccf2612094a"
            authorId:
              type: string

              example: "65096c2fd1b51ccf2612094a"
            articleId:
              type: string

              example: "65096c2fd1b51ccf2612094a"
            body:
              type: string
              format: text
              example: the body of the first article
            status:
              type: string
              enum: [public, privet]
              example: public
          required: [id, authorId, articleId, title, body, status]
        - $ref: "#/components/schemas/Timestamp"
    Timestamp:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required: [createdAt, updatedAt]
    authorDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 3
        name:
          type: string
          example: atik
      required: [id, name]
    pagination:
      type: object
      properties:
        page:
          type: integer
          format: int32
          example: 1
        limit:
          type: integer
          format: int32
          example: 5
        next:
          type: integer
          format: int32
          example: 3
        prev:
          type: integer
          format: int32
          example: 1
        totalpage:
          type: integer
          format: int32
          example: 5
        totalitems:
          type: integer
          format: int32
          example: 20
      required:
        - page
        - limit
        - totalpage
        - totalitems
    usercreateDTO:
      type: object
      properties:
        name:
          type: string
          example: md ariful islam
        email:
          type: string
          format: email
          example: ariful@example.com
        password:
          type: string
          format: password
          example: pass123
        avatar:
          type: string
          format: url
          example: "http//avatar/min.png"
      required: [name, email, password]
  responses:
    "500":
      description: Internal Server Error
      content:
        "aplication/json":
          schema:
            type: object
            properties:
              code:
                type: string
                format: int32
                example: 500
              error:
                type: string
                example: Internal Server Error
              message:
                type: string
                example: we are sory for the inconvenent . pleace try agin later

    "400":
      description: bad request
      content:
        "aplication/json":
          schema:
            type: object
            properties:
              code:
                type: string
                format: int32
                example: 400
              error:
                type: string
                example: bad request
              data:
                type: array
                items:
                  type: object
                  properties:
                    field:
                      type: string
                      example: email
                    message:
                      type: string
                      example: invalide email
                    in:
                      type: string
                      enum: [query.body]
                      example: body
    "401":
      description: UnAuthorized
      content:
        "aplication/json":
          schema:
            type: object
            properties:
              code:
                type: string
                format: int32
                example: 401
              error:
                type: string
                example: Unauthorized
              message:
                type: string
                example: you don't have right for permission
    "404":
      description: Resource  not found
      content:
        "aplication/json":
          schema:
            type: object
            properties:
              code:
                type: string
                format: int32
                example: 404
              error:
                type: string
                example: not found
              message:
                type: string
                example: Request resource not found
  parameters:
    pageParams:
      in: query
      name: page
      description: current page number
      schema:
        type: integer
        format: int32
        example: 1
      required: true
    limitParams:
      in: query
      name: limit
      description: limit the page
      schema:
        type: integer
        format: int32
        example: 5
      required: true
    limitParamsUser:
      in: query
      name: limit
      description: limit the page
      schema:
        type: integer
        format: int32
        example: 5

    sortTypeParams:
      in: query
      name: sort_type
      description: shorted the acc or dec
      schema:
        type: string
        enum: [acc, dec]
    sortByparams:
      in: query
      name: sort_by
      description: sorted by
      schema:
        type: string
        enum:
          - updatedAt
          - _id
          - title
          - body
          - tags
          - createdAt
        default: updatedAt
    sortByparamsOfuser:
      in: query
      name: sort_by
      description: sorted by
      schema:
        type: string
        enum:
          - updatedAt
          - _id
          - createdAt
        default: updatedAt
    sortByparamsComment:
      in: query
      name: sort_by
      description: sorted by
      schema:
        type: string
        enum:
          - updatedAt

          - createdAt
        default: updatedAt
    searchparams:
      in: query
      name: search
      description: search by title
      schema:
        type: string
        example: title
    tagsparams:
      in: query
      name: tags
      description: search by tags name
      schema:
        type: string
        # enum:
        #   - Inspiration
        #   - Nature
        #   - Health
        #   - Travel
        #   - Food
        #   - Technology
        example: technology
    searchparamsUser:
      in: query
      name: search
      description: search by name or email
      schema:
        type: string
        example: name
    idpathparams:
      in: path
      name: id
      required: true
      description: article id
      schema:
        type: string

        example: "650a365836d4d7d5dad14a2e"
    commentPathparam:
      in: path
      name: id
      required: true
      description: comment id
      schema:
        type: string

        example: "650a365836d4d7d5dad14a2e"
    userpathParams:
      in: path
      name: id
      required: true
      description: user id
      schema:
        type: string

        example: "650a365836d4d7d5dad14a2e"
